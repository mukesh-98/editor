"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var CloudinaryImageUploadAdapter = /** @class */ (function () {
    function CloudinaryImageUploadAdapter(loader, cloudName, unsignedUploadPreset, sizes) {
        this.loader = loader;
        this.xhr = new XMLHttpRequest();
        this.cloudName = cloudName;
        this.unsignedUploadPreset = unsignedUploadPreset;
        if (sizes) {
            this.sizes = sizes;
        }
    }
    CloudinaryImageUploadAdapter.prototype.upload = function () {
        var _this = this;
        return this.loader.file.then(function (file) {
            return new Promise(function (resolve, reject) {
                var fd = new FormData();
                var url = "https://api.cloudinary.com/v1_1/" + _this.cloudName + "/upload";
                _this.xhr.open('POST', url, true);
                _this.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                // Hookup an event listener to update the upload progress bar
                _this.xhr.upload.addEventListener('progress', function (e) {
                    _this.loader.uploadTotal = 100;
                    _this.loader.uploaded = Math.round((e.loaded * 100) / e.total);
                });
                // Hookup a listener to listen for when the request state changes
                _this.xhr.onreadystatechange = function () {
                    if (_this.xhr.readyState === 4 && _this.xhr.status === 200) {
                        // Successful upload, resolve the promise with the new image
                        var response = JSON.parse(_this.xhr.responseText);
                        var images = void 0;
                        if (_this.sizes) {
                            images = __assign({ default: response.secure_url }, _this.getImageSizes(response.secure_url));
                        }
                        else {
                            images = {
                                default: response.secure_url,
                            };
                        }
                        resolve(images);
                    }
                    else if (_this.xhr.status !== 200) {
                        // Unsuccessful request, reject the promise
                        reject('Upload failed');
                    }
                };
                // Setup the form data to be sent in the request
                fd.append('upload_preset', _this.unsignedUploadPreset);
                fd.append('tags', 'browser_upload');
                fd.append('file', file);
                _this.xhr.send(fd);
            });
        });
    };
    CloudinaryImageUploadAdapter.prototype.abort = function () {
        // This function is called to abort the request if an error occurs
        if (this.xhr) {
            this.xhr.abort();
        }
    };
    CloudinaryImageUploadAdapter.prototype.getImageSizes = function (defaultImageUrl) {
        var imageObject = {};
        // Split url in two
        var splitUrl = this.splitUrl(defaultImageUrl);
        if (this.sizes) {
            var len_1 = this.sizes.length;
            this.sizes.forEach(function (size, index) {
                if (index !== len_1 - 1) {
                    imageObject[size.toString()] = splitUrl.firstHalf + "w_" + size + "%2Cc_scale" + splitUrl.secondHalf;
                }
                else {
                    imageObject[size.toString()] = defaultImageUrl;
                }
            });
        }
        return imageObject;
    };
    CloudinaryImageUploadAdapter.prototype.splitUrl = function (url) {
        // This function splits the image url in two.
        var firstHalfLength = 41 + this.cloudName.length;
        var firstHalf = url.substr(0, firstHalfLength);
        var secondHalf = url.substr(firstHalfLength - 1, url.length - firstHalfLength + 1);
        return {
            firstHalf: firstHalf,
            secondHalf: secondHalf,
        };
    };
    return CloudinaryImageUploadAdapter;
}());
exports.CloudinaryImageUploadAdapter = CloudinaryImageUploadAdapter;
